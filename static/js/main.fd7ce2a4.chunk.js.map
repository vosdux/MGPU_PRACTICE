{"version":3,"sources":["pages/drag-n-drop/DragNDrop.tsx","components/badge/Badge.tsx","components/modal-layout/ModalLayout.tsx","pages/cards/CardsPage.tsx","pages/table-page/TablePage.tsx","pages/checkbox-page/CheckboxPage.tsx","pages/image-page/ImagePage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DropsEnum","Badge","children","className","ModalLayout","closeModal","modalIsOpen","modalMode","isOpen","onRequestClose","contentLabel","overlayClassName","onClick","style","width","ITEMS","name","id","LEFT_COLUMN_VALUES","RIGHT_COLUMN_VALUES","reorderDifferentLists","startList","endList","startIndex","endIndex","setStart","setEnd","newStartList","newEndList","splice","removed","reorder","items","setItems","newItems","DragNDrop","navigate","useNavigate","useState","leftColumn","setLeftColumn","rigthColumn","setRigthColumn","initial","setInitial","setModalIsOpen","onDragEnd","result","provided","destination","destinationIndex","index","sourceIndex","source","destinationId","droppableId","sourceId","draggableId","left","find","elem","alert","right","snapshot","droppableProps","ref","innerRef","map","item","draggableProps","dragHandleProps","placeholder","direction","sort","a","b","join","cards","title","value","CardsPage","firstChecked","setFirstChecked","secondChecked","setSecondChecked","checked","setChecked","useEffect","setTimeout","getCardClass","some","console","log","onCardClick","length","labels","text","values","TablePage","tableValues","setTableValues","lablesId","tableVlauesId","CHECKBOXES","SUCCESS_VALUES","CheckboxPage","setValues","type","state","filter","push","htmlFor","newValues","IMAGE_ITEMS","ImagePage","undefined","setModalMode","main","setMain","image","setImage","newValue","imageResult","App","path","element","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd7ce2a4.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { DragDropContext, Droppable, Draggable, DropResult, ResponderProvided } from \"react-beautiful-dnd\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport Badge from '../../components/badge/Badge';\r\nimport ModalLayout from '../../components/modal-layout/ModalLayout';\r\n\r\nimport './styles.css';\r\n\r\nenum DropsEnum {\r\n  right = 'right',\r\n  left = 'left',\r\n  initial = 'initial'\r\n}\r\n\r\nexport type ColumnItem = {\r\n  name: string;\r\n  id: string;\r\n};\r\n\r\nconst ITEMS = [{ name: 'Флешки', id: \"0\" }, { name: 'Телепортация', id: \"1\" }, { name: 'Оптоволоконная связь', id: \"2\" }, { name: 'Персональный компьютер', id: \"3\" }]\r\n\r\nconst LEFT_COLUMN_VALUES = [\"0\", \"1\", \"3\"];\r\nconst RIGHT_COLUMN_VALUES = [\"2\"];\r\n\r\nconst reorderDifferentLists = (\r\n  startList: ColumnItem[],\r\n  endList: ColumnItem[],\r\n  startIndex: number,\r\n  endIndex: number,\r\n  setStart: (items: ColumnItem[]) => void,\r\n  setEnd: (items: ColumnItem[]) => void\r\n) => {\r\n  const newStartList = [...startList];\r\n  const newEndList = [...endList]\r\n\r\n  const [removed] = newStartList.splice(startIndex, 1);\r\n  newEndList.splice(endIndex, 0, removed);\r\n\r\n  setStart(newStartList);\r\n  setEnd(newEndList);\r\n};\r\n\r\nconst reorder = (\r\n  items: ColumnItem[],\r\n  startIndex: number,\r\n  endIndex: number,\r\n  setItems: (items: ColumnItem[]) => void,\r\n) => {\r\n  const newItems = [...items];\r\n  const [removed] = newItems.splice(startIndex, 1);\r\n\r\n  newItems.splice(endIndex, 0, removed);\r\n\r\n  setItems(newItems);\r\n};\r\n\r\nconst DragNDrop = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const [leftColumn, setLeftColumn] = useState<ColumnItem[]>([]);\r\n  const [rigthColumn, setRigthColumn] = useState<ColumnItem[]>([]);\r\n  const [initial, setInitial] = useState<ColumnItem[]>(ITEMS);\r\n  const [modalIsOpen, setModalIsOpen] = useState(false);\r\n\r\n  const onDragEnd = (result: DropResult, provided: ResponderProvided) => {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const destinationIndex = result.destination.index;\r\n    const sourceIndex = result.source.index;\r\n\r\n    const destinationId = result.destination.droppableId;\r\n    const sourceId = result.source.droppableId;\r\n\r\n    const draggableId = result.draggableId;\r\n\r\n    if (destinationId === DropsEnum.left) {\r\n      if (sourceId === DropsEnum.left) {\r\n        reorder(leftColumn, sourceIndex, destinationIndex, setLeftColumn);\r\n      } else if (LEFT_COLUMN_VALUES.find(elem => elem === draggableId)) {\r\n        reorderDifferentLists(initial, leftColumn, sourceIndex, destinationIndex, setInitial, setLeftColumn);\r\n      } else {\r\n        alert('Неверно');\r\n      }\r\n    }\r\n\r\n    if (destinationId === DropsEnum.right) {\r\n      if (sourceId === DropsEnum.right) {\r\n        reorder(rigthColumn, sourceIndex, destinationIndex, setRigthColumn);\r\n      } else if (RIGHT_COLUMN_VALUES.find(elem => elem === draggableId)) {\r\n        reorderDifferentLists(initial, rigthColumn, sourceIndex, destinationIndex, setInitial, setRigthColumn);\r\n      } else {\r\n        alert('Неверно');\r\n      }\r\n    }\r\n\r\n    if (destinationId === DropsEnum.initial) {\r\n      if (sourceId === DropsEnum.initial) {\r\n        reorder(initial, sourceIndex, destinationIndex, setInitial);\r\n      }\r\n\r\n      if (sourceId === DropsEnum.right) {\r\n        reorderDifferentLists(rigthColumn, initial, sourceIndex, destinationIndex, setInitial, setRigthColumn);\r\n      }\r\n\r\n      if (sourceId === DropsEnum.left) {\r\n        reorderDifferentLists(leftColumn, initial, sourceIndex, destinationIndex, setInitial, setLeftColumn);\r\n      }\r\n    }\r\n  }\r\n\r\n  const onSubmit = () => {\r\n    const left = leftColumn.map(({ id }) => id);\r\n    const right = rigthColumn.map(({ id }) => id);\r\n    left.sort((a, b) => +a - +b);\r\n\r\n    if (left.join() === LEFT_COLUMN_VALUES.join() && right.join() === RIGHT_COLUMN_VALUES.join()) {\r\n      navigate('/MGPU_PRACTICE/cards');\r\n    } else {\r\n      setModalIsOpen(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='main'>\r\n      <ModalLayout\r\n        modalIsOpen={modalIsOpen}\r\n        closeModal={() => setModalIsOpen(false)}\r\n      >\r\n        <div className='root'>\r\n          <DragDropContext onDragEnd={onDragEnd}>\r\n            <div className=\"columns\">\r\n              <div className=\"column\">\r\n                <p>Вопрос 1</p>\r\n                <Droppable droppableId={DropsEnum.left}>\r\n                  {(provided, snapshot) => (\r\n                    <div\r\n                      className='dropable'\r\n                      {...provided.droppableProps}\r\n                      ref={provided.innerRef}\r\n                    >\r\n\r\n                      {leftColumn.map((item, index) => (\r\n                        <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                          {(provided, snapshot) => (\r\n\r\n                            <div\r\n                              ref={provided.innerRef}\r\n                              {...provided.draggableProps}\r\n                              {...provided.dragHandleProps}\r\n                              style={{ ...provided.draggableProps.style }}\r\n                            >\r\n                              <Badge className=\"initial-item mb-10\">\r\n                                {item.name}\r\n                              </Badge>\r\n                            </div>\r\n\r\n                          )}\r\n                        </Draggable>\r\n                      ))}\r\n                      {provided.placeholder}\r\n                    </div>\r\n                  )}\r\n                </Droppable>\r\n              </div>\r\n              <div className=\"column\">\r\n                <p>Вопрос 1</p>\r\n                <Droppable droppableId={DropsEnum.right}>\r\n                  {(provided, snapshot) => (\r\n                    <div\r\n                      className=\"dropable\"\r\n                      {...provided.droppableProps}\r\n                      ref={provided.innerRef}\r\n                    >\r\n                      {rigthColumn.map((item, index) => (\r\n                        <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                          {(provided, snapshot) => (\r\n                            <div\r\n                              ref={provided.innerRef}\r\n                              {...provided.draggableProps}\r\n                              {...provided.dragHandleProps}\r\n                            >\r\n                              <Badge className=\"initial-item mb-10\">\r\n                                {item.name}\r\n                              </Badge>\r\n                            </div>\r\n                          )}\r\n                        </Draggable>\r\n                      ))}\r\n                      {provided.placeholder}\r\n                    </div>\r\n                  )}\r\n                </Droppable>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <Droppable droppableId={DropsEnum.initial} direction='horizontal'>\r\n                {(provided, snapshot) => (\r\n                  <div\r\n                    className=\"row\"\r\n                    {...provided.droppableProps}\r\n                    ref={provided.innerRef}\r\n                  >\r\n                    {initial.map((item, index) => (\r\n                      <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                        {(provided, snapshot) => (\r\n\r\n                          <div\r\n                            ref={provided.innerRef}\r\n                            {...provided.draggableProps}\r\n                            {...provided.dragHandleProps}\r\n                            style={{ ...provided.draggableProps.style }}\r\n                          >\r\n                            <Badge className=\"initial-item\">\r\n                              {item.name}\r\n                            </Badge>\r\n                          </div>\r\n\r\n                        )}\r\n                      </Draggable>\r\n                    ))}\r\n                    {provided.placeholder}\r\n                  </div>\r\n                )}\r\n              </Droppable>\r\n            </div>\r\n          </DragDropContext>\r\n          <button onClick={onSubmit} className='button'>Проверить</button>\r\n        </div>\r\n      </ModalLayout>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DragNDrop;\r\n","import React, { FC } from 'react'\r\n\r\nimport './styles.css';\r\n\r\ntype Props = {\r\n  className?: string;\r\n}\r\n\r\nconst Badge: FC<Props> = ({ children, className }) => {\r\n  return (\r\n    <div className={`badge ${className || ''}`}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Badge;\r\n","import React, { FC } from 'react';\r\nimport Modal from 'react-modal';\r\n\r\nimport './styles.css';\r\n\r\ntype Props = {\r\n  modalIsOpen: boolean;\r\n  closeModal: () => void;\r\n  modalMode?: 'success';\r\n}\r\n\r\nconst ModalLayout: FC<Props> = ({ closeModal, modalIsOpen, modalMode, children }) => {\r\n  return (\r\n    <>\r\n      <Modal\r\n        isOpen={modalIsOpen}\r\n        onRequestClose={closeModal}\r\n        className=\"modal\"\r\n        contentLabel=\"Error modal\"\r\n        overlayClassName=\"overlay\"\r\n      >\r\n        {modalMode ? (<p className=\"modal-text\">Вы прошли тест!</p>) : (\r\n          <>\r\n            <p className=\"modal-text\">Неверно!</p>\r\n            <p className=\"modal-text\">Попробуйте еще раз</p>\r\n            <div className=\"modal-footer\">\r\n              <button onClick={closeModal} className=\"button\" style={{ width: 100 }}>Закрыть</button>\r\n            </div>\r\n          </>\r\n        )}\r\n      </Modal>\r\n      {children}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ModalLayout;\r\n","import React, { FC, useState, useEffect } from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport ModalLayout from '../../components/modal-layout/ModalLayout';\r\n\r\nimport './styles.css';\r\n\r\nconst cards = [\r\n  { title: 'Текст1', value: '1', id: '1' },\r\n  { title: 'Текст2', value: '2', id: '2' },\r\n  { title: 'Текст3', value: '3', id: '3' },\r\n  { title: 'Текст1', value: '1', id: '4' },\r\n  { title: 'Текст2', value: '2', id: '5' },\r\n  { title: 'Текст3', value: '3', id: '6' },\r\n];\r\n\r\nconst CardsPage: FC = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const [firstChecked, setFirstChecked] = useState('');\r\n  const [secondChecked, setSecondChecked] = useState('');\r\n  const [checked, setChecked] = useState<string[]>([]);\r\n  const [modalIsOpen, setModalIsOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const checkItems = () => {\r\n      const firstValue = cards.find(elem => elem.id === firstChecked)?.value;\r\n      const secondValue = cards.find(elem => elem.id === secondChecked)?.value;\r\n\r\n      if (firstValue === secondValue) {\r\n        setChecked(value => {\r\n          return [...value, firstChecked, secondChecked];\r\n        });\r\n      }\r\n      setFirstChecked('');\r\n      setSecondChecked('');\r\n    }\r\n\r\n    if (firstChecked !== '' && secondChecked !== '') {\r\n      setTimeout(checkItems, 600);\r\n    }\r\n  }, [firstChecked, secondChecked]);\r\n\r\n  const getCardClass = (id: string) => {\r\n    if (id === firstChecked || id === secondChecked || checked.some(elem => elem === id)) {\r\n      return 'card flipped';\r\n    } else {\r\n      return 'card';\r\n    }\r\n  };\r\n\r\n  console.log(secondChecked, 'sec');\r\n  console.log(firstChecked, 'first');\r\n  console.log(checked, 'ch');\r\n\r\n  const onCardClick = (id: string) => {\r\n    if (checked.some(elem => elem === id) || firstChecked === id) {\r\n      return false;\r\n    }\r\n\r\n    if (secondChecked) {\r\n      return false;\r\n    }\r\n\r\n    if (firstChecked) {\r\n      setSecondChecked(id);\r\n    } else {\r\n      setFirstChecked(id);\r\n    }\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    if (checked.length === 6) {\r\n      navigate('/MGPU_PRACTICE/table');\r\n    } else {\r\n      setModalIsOpen(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='main'>\r\n      <ModalLayout\r\n        modalIsOpen={modalIsOpen}\r\n        closeModal={() => setModalIsOpen(false)}\r\n      >\r\n        <div className='card-row'>\r\n          {cards.map(({ title, id }) => {\r\n            return (\r\n              <div key={id} className={getCardClass(id)} onClick={() => onCardClick(id)}>\r\n                <div className='card__face card__face--front'></div>\r\n                <div className='card__face card__face--back'>{title}</div>\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n        <button onClick={onSubmit} className='button'>Проверить</button>\r\n      </ModalLayout>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardsPage;\r\n","import React, { FC, useState } from 'react'\r\nimport { DragDropContext, Draggable, Droppable, DropResult, ResponderProvided } from 'react-beautiful-dnd';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport ModalLayout from '../../components/modal-layout/ModalLayout';\r\n\r\nimport './styles.css';\r\n\r\nconst labels = [\r\n  { text: 'Столбик 1', value: '1' },\r\n  { text: 'Столбик 2', value: '2' },\r\n  { text: 'Столбик 3', value: '3' },\r\n  { text: 'Столбик 4', value: '4' },\r\n];\r\n\r\nconst values = [\r\n  { text: 'Значение 2', value: '2' },\r\n  { text: 'Значение 4', value: '4' },\r\n  { text: 'Значение 1', value: '1' },\r\n  { text: 'Значение 3', value: '3' },\r\n];\r\n\r\ntype Column = {\r\n  text: string;\r\n  value: string;\r\n}\r\n\r\nconst reorder = (\r\n  items: Column[],\r\n  startIndex: number,\r\n  endIndex: number,\r\n  setItems: (items: Column[]) => void,\r\n) => {\r\n  const newItems = [...items];\r\n  const [removed] = newItems.splice(startIndex, 1);\r\n\r\n  newItems.splice(endIndex, 0, removed);\r\n\r\n  setItems(newItems);\r\n};\r\n\r\nconst TablePage: FC = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const [tableValues, setTableValues] = useState<Column[]>(values);\r\n  const [modalIsOpen, setModalIsOpen] = useState(false);\r\n\r\n  const onDragEnd = (result: DropResult, provided: ResponderProvided) => {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const destinationIndex = result.destination.index;\r\n    const sourceIndex = result.source.index;\r\n\r\n    reorder(tableValues, sourceIndex, destinationIndex, setTableValues);\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    const lablesId = labels.map(item => item.value);\r\n    const tableVlauesId = tableValues.map(item => item.value);\r\n\r\n    if (lablesId.join() === tableVlauesId.join()) {\r\n      navigate('/MGPU_PRACTICE/checkboxes');\r\n    } else {\r\n      setModalIsOpen(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='main'>\r\n      <ModalLayout\r\n        modalIsOpen={modalIsOpen}\r\n        closeModal={() => setModalIsOpen(false)}\r\n      >\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n          <div className='table-container'>\r\n            <div className='table'>\r\n              <div className='table-column'>\r\n                {labels.map(({ text, value }) => (\r\n                  <div className='table-item'>{text}</div>\r\n                ))}\r\n              </div>\r\n              <Droppable droppableId='s'>\r\n                {(provided, snapshot) => (\r\n                  <div\r\n                    className='table-column'\r\n                    {...provided.droppableProps}\r\n                    ref={provided.innerRef}\r\n                  >\r\n                    {tableValues.map(({ text, value }, index) => (\r\n                      <Draggable key={value} draggableId={value} index={index}>\r\n                        {(provided, snapshot) => (\r\n                          <div className='table-item' ref={provided.innerRef}\r\n                            {...provided.draggableProps}\r\n                            {...provided.dragHandleProps}\r\n                            style={{ ...provided.draggableProps.style }}>\r\n                            {text}\r\n                          </div>\r\n                        )}\r\n                      </Draggable>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </Droppable>\r\n            </div>\r\n          </div>\r\n          <button onClick={onSubmit} className='button'>Проверить</button>\r\n        </DragDropContext>\r\n      </ModalLayout>\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nexport default TablePage;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport ModalLayout from '../../components/modal-layout/ModalLayout';\r\n\r\nimport './styles.css';\r\n\r\nconst CHECKBOXES = [\r\n  { title: 'Текст 1', value: 1, id: '1' },\r\n  { title: 'Текст 2', value: 2, id: '2' },\r\n  { title: 'Текст 3', value: 3, id: '3' },\r\n  { title: 'Текст 4', value: 4, id: '4' },\r\n  { title: 'Текст 5', value: 5, id: '5' },\r\n];\r\n\r\nconst SUCCESS_VALUES = [2, 5];\r\n\r\nconst CheckboxPage = () => {\r\n  let navigate = useNavigate();\r\n\r\n  const [values, setValues] = useState<number[]>([]);\r\n  const [modalIsOpen, setModalIsOpen] = useState(false);\r\n\r\n  const onClick = (value: number) => {\r\n    setValues(state => {\r\n      if (state.some(elem => elem === value)) {\r\n        state = state.filter(elem => elem !== value);\r\n      } else {\r\n        console.log('add');\r\n        state.push(value);\r\n      }\r\n      \r\n      return state\r\n    })\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    const newValues = [...values];\r\n    newValues.sort((a, b) => a - b);\r\n\r\n    if (newValues.join() === SUCCESS_VALUES.join()) {\r\n      navigate('/MGPU_PRACTICE/image');\r\n    } else {\r\n      setModalIsOpen(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='ch-page'>\r\n      <ModalLayout\r\n        modalIsOpen={modalIsOpen}\r\n        closeModal={() => setModalIsOpen(false)}\r\n      >\r\n      {CHECKBOXES.map(({ title, value, id }) => (\r\n        <div className='ch-container'>\r\n          <input type=\"checkbox\" id={id} name={id} value={value} className=\"custom-checkbox\" onClick={() => onClick(value)}/>\r\n          <label htmlFor={id}>{title}</label>\r\n        </div>\r\n      ))}\r\n      <button onClick={onSubmit} className='button'>Проверить</button>\r\n      </ModalLayout>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckboxPage;\r\n","import React, { useState } from 'react';\r\nimport { DragDropContext, Draggable, Droppable, DropResult, ResponderProvided } from 'react-beautiful-dnd';\r\n\r\nimport Badge from '../../components/badge/Badge';\r\nimport ModalLayout from '../../components/modal-layout/ModalLayout';\r\nimport { ColumnItem } from '../drag-n-drop/DragNDrop';\r\n\r\nimport './styles.css';\r\n\r\nconst ITEMS = [\r\n  { name: 'Текст 1', id: \"0\" },\r\n  { name: 'Текст 2', id: \"1\" },\r\n  { name: 'Текст 3', id: \"2\" },\r\n  { name: 'Текст 4', id: \"3\" },\r\n  { name: 'Текст 5', id: \"4\" },\r\n];\r\n\r\nconst IMAGE_ITEMS = [\"0\", \"2\", \"3\"];\r\n\r\nconst ImagePage = () => {\r\n  const [modalIsOpen, setModalIsOpen] = useState(false);\r\n  const [modalMode, setModalMode] = useState<'success' | undefined>(undefined);\r\n\r\n  const [main, setMain] = useState<ColumnItem[]>(ITEMS);\r\n  const [image, setImage] = useState<ColumnItem[]>([]);\r\n\r\n  const onSubmit = () => {\r\n    let imageResult = image.map(item => item.id);\r\n\r\n    imageResult = imageResult.sort((a, b) => {\r\n      return +a - +b;\r\n    });\r\n\r\n    if (imageResult.join() === IMAGE_ITEMS.join()) {\r\n      setModalMode('success');\r\n      setModalIsOpen(true);\r\n    }\r\n    setModalIsOpen(true);\r\n  };\r\n\r\n  const onDragEnd = (result: DropResult, provided: ResponderProvided) => {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const sourceIndex = result.source.index;\r\n\r\n    if (IMAGE_ITEMS.some(elem => elem === main[sourceIndex].id)) {\r\n      setImage(value => [...value, main[sourceIndex]]);\r\n      setMain(value => {\r\n        const newValue = [...value];\r\n        newValue.splice(sourceIndex, 1);\r\n\r\n        return newValue;\r\n      })\r\n    } else {\r\n      setModalIsOpen(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"image-root\">\r\n      <ModalLayout\r\n        modalIsOpen={modalIsOpen}\r\n        closeModal={() => setModalIsOpen(false)}\r\n        modalMode={modalMode}\r\n      >\r\n        <div className=\"image-container\">\r\n          <DragDropContext onDragEnd={onDragEnd}>\r\n            <div className=\"image\">\r\n              <Droppable droppableId='image'>\r\n                {(provided, snapshot) => (\r\n                  <div\r\n                    className=\"image-badges\"\r\n                    {...provided.droppableProps}\r\n                    ref={provided.innerRef}\r\n                  >\r\n                    {image.map(({ name, id }) => <Badge key={id} className=\"initial-item mb-10\">\r\n                      {name}\r\n                    </Badge>)}\r\n                  </div>)}\r\n              </Droppable>\r\n            </div>\r\n            <div className='column'>\r\n              <p>Вопрос 1</p>\r\n              <Droppable droppableId=\"main\">\r\n                {(provided, snapshot) => (\r\n                  <div\r\n                    className='dropable'\r\n                    {...provided.droppableProps}\r\n                    ref={provided.innerRef}\r\n                  >\r\n\r\n                    {main.map((item, index) => (\r\n                      <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                        {(provided, snapshot) => (\r\n\r\n                          <div\r\n                            ref={provided.innerRef}\r\n                            {...provided.draggableProps}\r\n                            {...provided.dragHandleProps}\r\n                            style={{ ...provided.draggableProps.style }}\r\n                          >\r\n                            <Badge key={item.id} className=\"initial-item mb-10\">\r\n                              {item.name}\r\n                            </Badge>\r\n                          </div>\r\n\r\n                        )}\r\n                      </Draggable>\r\n                    ))}\r\n                    {provided.placeholder}\r\n                  </div>\r\n                )}\r\n              </Droppable>\r\n            </div>\r\n          </DragDropContext>\r\n        </div>\r\n        <div className='button-row'>\r\n          <button onClick={onSubmit} className='button'>Проверить</button>\r\n        </div>\r\n      </ModalLayout >\r\n    </div >\r\n  );\r\n};\r\n\r\nexport default ImagePage;\r\n","import React from 'react';\r\nimport { Routes, Route, BrowserRouter, Navigate } from 'react-router-dom';\r\n\r\nimport DragNDrop from './pages/drag-n-drop/DragNDrop';\r\nimport CardsPage from './pages/cards/CardsPage';\r\nimport TablePage from './pages/table-page/TablePage';\r\nimport CheckboxPage from './pages/checkbox-page/CheckboxPage';\r\nimport ImagePage from './pages/image-page/ImagePage';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route path=\"/MGPU_PRACTICE\" element={<DragNDrop />} />\r\n        <Route path=\"/MGPU_PRACTICE/cards\" element={<CardsPage />} />\r\n        <Route path=\"/MGPU_PRACTICE/table\" element={<TablePage />} />\r\n        <Route path=\"/MGPU_PRACTICE/checkboxes\" element={<CheckboxPage />} />\r\n        <Route path=\"/MGPU_PRACTICE/image\" element={<ImagePage />} />\r\n        <Route\r\n          path=\"*\"\r\n          element={<Navigate to=\"/\" />}\r\n        />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}