{"version":3,"sources":["components/drag-n-drop/DragNDrop.tsx","components/cards/Cards.tsx","components/columns/Columns.tsx","components/badge/Badge.tsx","pages/main-page/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DropsEnum","cards","title","value","id","Cards","useState","firstChecked","setFirstChecked","secondChecked","setSecondChecked","checked","setChecked","useEffect","setTimeout","find","elem","getCardClass","some","className","map","onClick","onCardClick","labels","text","values","Columns","tableValues","setTableValues","onDragEnd","result","provided","destination","destinationIndex","index","sourceIndex","source","items","startIndex","endIndex","setItems","newItems","splice","removed","reorder","lablesId","item","tableVlauesId","join","alert","droppableId","snapshot","droppableProps","ref","innerRef","draggableId","draggableProps","dragHandleProps","style","Badge","children","ITEMS","name","LEFT_COLUMN_VALUES","RIGHT_COLUMN_VALUES","reorderDifferentLists","startList","endList","setStart","setEnd","newStartList","newEndList","DragNDrop","leftColumn","setLeftColumn","rigthColumn","setRigthColumn","initial","setInitial","destinationId","sourceId","left","right","placeholder","direction","MainPage","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6548b44.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { DragDropContext, Droppable, Draggable, DropResult, ResponderProvided } from \"react-beautiful-dnd\";\r\nimport Badge from '../../components/badge/Badge';\r\n\r\nimport './styles.css';\r\n\r\nenum DropsEnum {\r\n  right = 'right',\r\n  left = 'left',\r\n  initial = 'initial'\r\n}\r\n\r\ntype ColumnItem = {\r\n  name: string;\r\n  id: string;\r\n};\r\n\r\nconst ITEMS = [{ name: 'Флешки', id: \"0\" }, { name: 'Телепортация', id: \"1\" }, { name: 'Оптоволоконная связь', id: \"2\" }, { name: 'Персональный компьютер', id: \"3\" }]\r\n\r\nconst LEFT_COLUMN_VALUES = [\"0\", \"1\", \"3\"];\r\nconst RIGHT_COLUMN_VALUES = [\"2\"];\r\n\r\nconst reorderDifferentLists = (\r\n  startList: ColumnItem[],\r\n  endList: ColumnItem[],\r\n  startIndex: number,\r\n  endIndex: number,\r\n  setStart: (items: ColumnItem[]) => void,\r\n  setEnd: (items: ColumnItem[]) => void\r\n) => {\r\n  const newStartList = [...startList];\r\n  const newEndList = [...endList]\r\n\r\n  const [removed] = newStartList.splice(startIndex, 1);\r\n  newEndList.splice(endIndex, 0, removed);\r\n\r\n  setStart(newStartList);\r\n  setEnd(newEndList);\r\n};\r\n\r\nconst reorder = (\r\n  items: ColumnItem[],\r\n  startIndex: number,\r\n  endIndex: number,\r\n  setItems: (items: ColumnItem[]) => void,\r\n) => {\r\n  const newItems = [...items];\r\n  const [removed] = newItems.splice(startIndex, 1);\r\n\r\n  newItems.splice(endIndex, 0, removed);\r\n\r\n  setItems(newItems);\r\n};\r\n\r\nconst DragNDrop = () => {\r\n  const [leftColumn, setLeftColumn] = useState<ColumnItem[]>([]);\r\n  const [rigthColumn, setRigthColumn] = useState<ColumnItem[]>([]);\r\n  const [initial, setInitial] = useState<ColumnItem[]>(ITEMS);\r\n\r\n  const onDragEnd = (result: DropResult, provided: ResponderProvided) => {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const destinationIndex = result.destination.index;\r\n    const sourceIndex = result.source.index;\r\n\r\n    const destinationId = result.destination.droppableId;\r\n    const sourceId = result.source.droppableId;\r\n\r\n    const draggableId = result.draggableId;\r\n\r\n    if (destinationId === DropsEnum.left) {\r\n      if (sourceId === DropsEnum.left) {\r\n        reorder(leftColumn, sourceIndex, destinationIndex, setLeftColumn);\r\n      } else if (LEFT_COLUMN_VALUES.find(elem => elem === draggableId)) {\r\n        reorderDifferentLists(initial, leftColumn, sourceIndex, destinationIndex, setInitial, setLeftColumn);\r\n      } else {\r\n        alert('Неверно');\r\n      }\r\n    }\r\n\r\n    if (destinationId === DropsEnum.right) {\r\n      if (sourceId === DropsEnum.right) {\r\n        reorder(rigthColumn, sourceIndex, destinationIndex, setRigthColumn);\r\n      } else if (RIGHT_COLUMN_VALUES.find(elem => elem === draggableId)) {\r\n        reorderDifferentLists(initial, rigthColumn, sourceIndex, destinationIndex, setInitial, setRigthColumn);\r\n      } else {\r\n        alert('Неверно');\r\n      }\r\n    }\r\n\r\n    if (destinationId === DropsEnum.initial) {\r\n      if (sourceId === DropsEnum.initial) {\r\n        reorder(initial, sourceIndex, destinationIndex, setInitial);\r\n      }\r\n\r\n      if (sourceId === DropsEnum.right) {\r\n        reorderDifferentLists(rigthColumn, initial, sourceIndex, destinationIndex, setInitial, setRigthColumn);\r\n      }\r\n\r\n      if (sourceId === DropsEnum.left) {\r\n        reorderDifferentLists(leftColumn, initial, sourceIndex, destinationIndex, setInitial, setLeftColumn);\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='root'>\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <div className=\"columns\">\r\n          <div className=\"column\">\r\n            <p>Вопрос 1</p>\r\n            <Droppable droppableId={DropsEnum.left}>\r\n              {(provided, snapshot) => (\r\n                <div\r\n                  className='dropable'\r\n                  {...provided.droppableProps}\r\n                  ref={provided.innerRef}\r\n                >\r\n\r\n                  {leftColumn.map((item, index) => (\r\n                    <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                      {(provided, snapshot) => (\r\n\r\n                        <div\r\n                          ref={provided.innerRef}\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                          style={{ ...provided.draggableProps.style }}\r\n                        >\r\n                          <Badge className=\"initial-item mb-10\">\r\n                            {item.name}\r\n                          </Badge>\r\n                        </div>\r\n\r\n                      )}\r\n                    </Draggable>\r\n                  ))}\r\n                  {provided.placeholder}\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n          </div>\r\n          <div className=\"column\">\r\n            <p>Вопрос 1</p>\r\n            <Droppable droppableId={DropsEnum.right}>\r\n              {(provided, snapshot) => (\r\n                <div\r\n                  className=\"dropable\"\r\n                  {...provided.droppableProps}\r\n                  ref={provided.innerRef}\r\n                >\r\n                  {rigthColumn.map((item, index) => (\r\n                    <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                      {(provided, snapshot) => (\r\n                        <div\r\n                          ref={provided.innerRef}\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                        >\r\n                          <Badge className=\"initial-item mb-10\">\r\n                            {item.name}\r\n                          </Badge>\r\n                        </div>\r\n                      )}\r\n                    </Draggable>\r\n                  ))}\r\n                  {provided.placeholder}\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <Droppable droppableId={DropsEnum.initial} direction='horizontal'>\r\n            {(provided, snapshot) => (\r\n              <div\r\n                className=\"row\"\r\n                {...provided.droppableProps}\r\n                ref={provided.innerRef}\r\n              >\r\n                {initial.map((item, index) => (\r\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                    {(provided, snapshot) => (\r\n\r\n                      <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        style={{ ...provided.draggableProps.style }}\r\n                      >\r\n                        <Badge className=\"initial-item\">\r\n                          {item.name}\r\n                        </Badge>\r\n                      </div>\r\n\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </div>\r\n      </DragDropContext>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DragNDrop;\r\n","import React, { FC, useState, useEffect } from 'react'\r\n\r\nimport './styles.css';\r\n\r\nconst cards = [\r\n  { title: 'Текст1', value: '1', id: '1' },\r\n  { title: 'Текст2', value: '2', id: '2' },\r\n  { title: 'Текст3', value: '3', id: '3' },\r\n  { title: 'Текст1', value: '1', id: '4' },\r\n  { title: 'Текст2', value: '2', id: '5' },\r\n  { title: 'Текст3', value: '3', id: '6' },\r\n];\r\n\r\nconst Cards: FC = () => {\r\n  const [firstChecked, setFirstChecked] = useState('');\r\n  const [secondChecked, setSecondChecked] = useState('');\r\n  const [checked, setChecked] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    const checkItems = () => {\r\n      if (firstChecked !== '' && secondChecked !== '') {\r\n        const firstValue = cards.find(elem => elem.id === firstChecked)?.value;\r\n        const secondValue = cards.find(elem => elem.id === secondChecked)?.value;\r\n\r\n        if (firstValue === secondValue) {\r\n          setChecked(value => {\r\n            return [...value, firstChecked, secondChecked];\r\n          });\r\n        }\r\n        setFirstChecked('');\r\n        setSecondChecked('');\r\n      }\r\n    }\r\n\r\n    setTimeout(checkItems, 1000);\r\n\r\n  }, [firstChecked, secondChecked]);\r\n\r\n  const getCardClass = (id: string) => {\r\n    if (id === firstChecked || id === secondChecked || checked.some(elem => elem === id)) {\r\n      return 'card flipped';\r\n    } else {\r\n      return 'card';\r\n    }\r\n  };\r\n\r\n  const onCardClick = (id: string) => {\r\n    if (checked.some(elem => elem === id)) {\r\n      return false;\r\n    }\r\n\r\n    if (firstChecked) {\r\n      setSecondChecked(id);\r\n    } else {\r\n      setFirstChecked(id);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='card-row'>\r\n      {cards.map(({ title, id }) => {\r\n        return (\r\n          <div key={id} className={getCardClass(id)} onClick={() => onCardClick(id)}>\r\n            <div className='card__face card__face--front'></div>\r\n            <div className='card__face card__face--back'>{title}</div>\r\n          </div>\r\n        )\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import React, { FC, useState } from 'react'\r\nimport { DragDropContext, Draggable, Droppable, DropResult, ResponderProvided } from 'react-beautiful-dnd';\r\n\r\nimport './styles.css';\r\n\r\nconst labels = [\r\n  { text: 'Столбик 1', value: '1' },\r\n  { text: 'Столбик 2', value: '2' },\r\n  { text: 'Столбик 3', value: '3' },\r\n  { text: 'Столбик 4', value: '4' },\r\n];\r\n\r\nconst values = [\r\n  { text: 'Значение 2', value: '2' },\r\n  { text: 'Значение 4', value: '4' },\r\n  { text: 'Значение 1', value: '1' },\r\n  { text: 'Значение 3', value: '3' },\r\n];\r\n\r\ntype Column = {\r\n  text: string;\r\n  value: string;\r\n}\r\n\r\nconst reorder = (\r\n  items: Column[],\r\n  startIndex: number,\r\n  endIndex: number,\r\n  setItems: (items: Column[]) => void,\r\n) => {\r\n  const newItems = [...items];\r\n  const [removed] = newItems.splice(startIndex, 1);\r\n\r\n  newItems.splice(endIndex, 0, removed);\r\n\r\n  setItems(newItems);\r\n};\r\n\r\nconst Columns: FC = () => {\r\n  const [tableValues, setTableValues] = useState<Column[]>(values);\r\n\r\n  const onDragEnd = (result: DropResult, provided: ResponderProvided) => {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const destinationIndex = result.destination.index;\r\n    const sourceIndex = result.source.index;\r\n\r\n    reorder(tableValues, sourceIndex, destinationIndex, setTableValues);\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    const lablesId = labels.map(item => item.value);\r\n    const tableVlauesId = tableValues.map(item => item.value);\r\n    \r\n    if (lablesId.join() === tableVlauesId.join()) {\r\n      alert('Верно!');\r\n    } else {\r\n      alert('Попробуйте еще раз!');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <div className='table-container'>\r\n        <button onClick={onSubmit} className='button'>Проверить</button>\r\n        <div className='table'>\r\n          <div className='table-column'>\r\n            {labels.map(({ text, value }) => (\r\n              <div className='table-item'>{text}</div>\r\n            ))}\r\n          </div>\r\n          <Droppable droppableId='s'>\r\n            {(provided, snapshot) => (\r\n              <div\r\n                className='table-column'\r\n                {...provided.droppableProps}\r\n                ref={provided.innerRef}\r\n              >\r\n                {tableValues.map(({ text, value }, index) => (\r\n                  <Draggable key={value} draggableId={value} index={index}>\r\n                    {(provided, snapshot) => (\r\n                      <div className='table-item' ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        style={{ ...provided.draggableProps.style }}>\r\n                        {text}\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </div>\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n\r\n};\r\n\r\nexport default Columns;\r\n","import React, { FC } from 'react'\r\n\r\nimport './styles.css';\r\n\r\ntype Props = {\r\n  className?: string;\r\n}\r\n\r\nconst Badge: FC<Props> = ({ children, className }) => {\r\n  return (\r\n    <div className={`badge ${className || ''}`}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Badge;\r\n","import Cards from '../../components/cards/Cards';\r\nimport Columns from '../../components/columns/Columns';\r\nimport DragNDrop from '../../components/drag-n-drop/DragNDrop';\r\n\r\nimport './styles.css';\r\n\r\nconst MainPage = () => {\r\n\r\n  return (\r\n    <div className='main'>\r\n      <DragNDrop />\r\n      <Cards />\r\n      <Columns />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MainPage;\r\n","import React from 'react';\nimport { Routes, Route, BrowserRouter } from 'react-router-dom';\n\nimport MainPage from './pages/main-page/MainPage';\n\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n    <Routes>\n      <Route path=\"/MGPU_PRACTICE\" element={<MainPage />} />\n      <Route path=\"*\" element={<></>} />\n     </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}